@page "/Clientes"
@rendermode InteractiveAuto
@inject NavigationManager navigation

<PageTitle>Clientes</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Clientes</strong></h3>
			<div class="d-flex align-items-start">
				<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (clientes.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay clientes creados</h1>
			}
			else
			{

				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elije una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="nombre">Nombre</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>ProveedorId</th>
							<th>Fecha de Creaci&oacute;n</th>
							<th>Nombre</th>
							<th>Direcci&oacute;n</th>
							<th>Email</th>
							<th>RNC</th>
							<th>Tipo de Contribuyente</th>
							<th>Nota</th>
							<th>Ver</th>
							<th>Editar</th>
							<th>Eliminar</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var cliente in clientes)
						{
							<tr>
								<td>@cliente.ClienteId</td>
								<td>@cliente.FechaCreacion.ToShortDateString()</td>
								<td>@cliente.Nombre</td>
								<td>@cliente.Cedula</td>
								<td>@cliente.Direccion</td>
								<td>@cliente.Telefono</td>
								<td><button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(cliente.ClienteId)"><i class="bi bi-eye" /></button></td>
								<td><button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(cliente.ClienteId)"><i class="bi bi-pencil-square" /></button></td>
								<td><button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(cliente.ClienteId)"><i class="bi bi-trash3-fill" /></button></td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Clientes:</strong> @clientes.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Clientes> clientes = new List<Clientes>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		//proveedores = await httpClient.GetFromJsonAsync<List<Proveedores>>("api/Tickets");

		loading = false;

		if (clientes.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			mensaje = "La fecha inicial no puede ser mayor a la fecha final";
			await LimpiarPantalla();
			return;
		}

		if (filtro == null)
		{
			mensaje = "Debe elegir un método parar filtrar";
			await LimpiarPantalla();
			return;
		}

		if (valorFiltro == null)
		{
			mensaje = "Debe ingresar un dato";
			await LimpiarPantalla();
			return;
		}

		// List<Proveedores> filtradoList1 = new List<Proveedores>();
		// filtradoList1 = await httpClient.GetFromJsonAsync<List<Tickets>>("api/Tickets");

		// switch (filtro)
		// {
		// 	case "id":
		// 		if (int.TryParse(valorFiltro, out int id))
		// 		{
		// 			Filtrar(1, filtradoList1, valorFiltro);
		// 		}
		// 		else
		// 		{
		// 			mensaje = "El valor ingresado para TicketId no es válido";
		// 			await Task.Delay(3000);
		// 		}
		// 		break;

		// 	case "solicitado por":
		// 		Filtrar(2, filtradoList1, valorFiltro);
		// 		break;

		// 	case "asunto":
		// 		Filtrar(3, filtradoList1, valorFiltro);
		// 		break;
		// }

		StateHasChanged();
		await LimpiarPantalla();
	}

	public async Task Restablecer()
	{
		// ticketsList = await httpClient.GetFromJsonAsync<List<Tickets>>("api/Tickets");
		// mensaje = "Lo datos fueron restablecidos";
	}

	public async Task Filtrar(int pos, List<Proveedores> filtrados, string dato)
	{
		// List<Tickets> filtradoList2 = new List<Tickets>();

		// foreach (var filtrado in filtrados)
		// {
		// 	if (pos == 1)
		// 	{
		// 		if (filtrado.TicketId == int.Parse(dato))
		// 			filtradoList2.Add(filtrado);
		// 	}
		// 	else if (pos == 2)
		// 	{
		// 		if (filtrado.SolicitadoPor == dato)
		// 			filtradoList2.Add(filtrado);
		// 	}
		// 	else
		// 	{
		// 		if (filtrado.Asunto == dato)
		// 			filtradoList2.Add(filtrado);
		// 	}

		// }


		// if (filtradoList2.Count > 0)
		// 	DatosFiltrados(filtradoList2);
		// else
		// {
		// 	mensaje = "No se encontraron resultados";
		// 	await Task.Delay(3000);
		// }
	}

	// public async Task DatosFiltrados(List<Tickets> valor)
	// {
	// 	List<Tickets> filtradoList2 = new List<Tickets>();
	// 	foreach (var filtrado in valor)
	// 	{
	// 		if (filtrado.Fecha >= desde && filtrado.Fecha <= hasta)
	// 			filtradoList2.Add(filtrado);
	// 	}

	// 	if (filtradoList2.Count != 0)
	// 	{
	// 		ticketsList = filtradoList2;
	// 		mensaje = "Se encontraron resultados";
	// 	}
	// 	else
	// 	{
	// 		mensaje = "No se encontraron resultados. Revise si el dato está entre la fecha indicada.";
	// 		await Task.Delay(3000);
	// 	}
	// }

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	void Volver()
	{
		navigation.NavigateTo("/");
	}
	void IrACrear()
	{
		navigation.NavigateTo("/CreateClientes");
	}

	void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewClientes/clienteId={id}");
	}
	void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditClientes/clienteId={id}");
	}
	void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteClientes/clienteId={id}");
	}
}