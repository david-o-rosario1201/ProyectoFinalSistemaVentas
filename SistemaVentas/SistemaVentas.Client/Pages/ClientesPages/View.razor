@page "/ViewClientes"
@page "/ViewClientes/clienteId={clienteId:int}"
@using global::SistemaVentas.Models.Models
@using global::SistemaVentas.Services.Services
@* @inject HttpClient httpClient *@
@rendermode InteractiveAuto
@inject NavigationManager navigation
@inject ClientesService clienteService

<PageTitle>Detalles de Cliente</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Detalles de Cliente</strong></h3>
		</div>
		@*Cuerpo*@
		<div class="card-body">
			@*Datos*@
			<ul>
				<li><strong>ClienteId:</strong> @cliente.ClienteId</li>
				<li><strong>Fecha de creaci&oacute;n:</strong> @cliente.FechaCreacion.ToShortDateString()</li>
				<li><strong>Nombre:</strong> @cliente.Nombre</li>
				<li><strong>Cedula:</strong> @cliente.Cedula</li>
				<li><strong>Direcci&oacute;n:</strong> @cliente.Direccion</li>
				<li><strong>Tel&eacute;fono:</strong> @cliente.Telefono</li>
			</ul>
		</div>
		@*Footer*@
		<div class="card-footer">
			<button type="button" class="btn btn-outline-dark" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Cancelar</button>
		</div>
	</div>
</div>
@mensaje

@code {
	[Parameter]
	public int clienteId { get; set; }

	public Clientes cliente { get; set; } = new Clientes();
	public List<TiposContribuyente> tiposContribuyente = new List<TiposContribuyente>();
	public List<Contactos> contactos = new List<Contactos>();
	public int tipo { get; set; }
	public string contacto { get; set; } = string.Empty;
	public string mensaje { get; set; } = string.Empty;
	// public List<Clientes> clientes = new List<Clientes>();
	// public List<Sistemas> sistemas = new List<Sistemas>();
	// public List<Prioridades> prioridades = new List<Prioridades>();
	// public string mensaje { get; set; } = string.Empty;
	//
	// public string message { get; set; } = string.Empty;
	// public string ultimo { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		cliente = await clienteService.GetCliente(clienteId);
		mensaje = "";

		// clientes = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
		// sistemas = await httpClient.GetFromJsonAsync<List<Sistemas>>("api/Sistemas");
		// prioridades = await httpClient.GetFromJsonAsync<List<Prioridades>>("api/Prioridades");
	}

	public async Task Eliminar()
	{
		// if (!await ValidarTicket())
		// {
		// 	return;
		// }
		// else
		// {
		// 	var response = await httpClient.PostAsJsonAsync("api/Tickets", proveedor);
		// 	if (response.IsSuccessStatusCode)
		// 	{
		// 		mensaje = "Se guardo el ticket";
		// 		StateHasChanged();
		// 		await Task.Delay(2000);
		// 		Volver();
		// 	}
		// 	else
		// 	{
		// 		mensaje = "No se guardo el ticket";
		// 	}
		// }

		mensaje = "Se creo";
	}

	@* public async Task<bool> ValidarTicket()
	{
		var tickets = await httpClient.GetFromJsonAsync<List<Tickets>>("api/Tickets");
		var asunto = tickets.Where(t => t.Asunto.Equals(proveedor.Asunto));
		var solicitadoPor = tickets.Where(t => t.SolicitadoPor.Equals(proveedor.SolicitadoPor));
		var descripcion = tickets.Where(t => t.Descripcion.Equals(proveedor.Descripcion));

		if (asunto.Any())
		{
			mensaje = "Ya existe un ticket con este asunto";
			return false;
		}
		if (solicitadoPor.Any())
		{
			mensaje = "Ya existe un ticket con este solicitado por";
			return false;
		}
		if (descripcion.Any())
		{
			mensaje = "Ya existe un ticket con esta descripción";
			return false;
		}

		return true;
	} *@

	@* public async Task<bool> ValidarDetalle()
	{

		foreach (var ticket in proveedor.TicketsDetalle)
		{
			if (ticket.Mensaje == message)
			{
				mensaje = "Ya existe un detalle con este mensaje";
				return false;
			}
			if (ticket.Emisor == transmitter)
			{
				mensaje = "Ya existe un detalle con este emisor";
				return false;
			}
		}

		return true;
	} *@


	public async Task LimpiarPantalla()
	{
		// message = string.Empty;
		// transmitter = string.Empty;
		// await Task.Delay(2000);
		// mensaje = string.Empty;
	}

	// public string ObtenerDescripcion(int id)
	// {
	// 	// var descripcion = accesorios.FirstOrDefault(a => a.AccesorioId == id);
	// 	// return descripcion.Descripcion;
	// }

	void Volver()
	{
		navigation.NavigateTo("/Clientes");
	}
}
