@page "/Categorias"
@using global::SistemaVentas.Models.Models
@using global::SistemaVentas.Services.Services
@rendermode InteractiveAuto
@inject NavigationManager navigation
@inject CategoriasService categoriasService

<PageTitle>Categorias</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Categorias</strong></h3>
			<div class="d-flex align-items-start">
				<div class="px-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
			</div>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (categorias.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay categorias creadas</h1>
			}
			else
			{
				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>
				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elije una opci&oacute;n</option>
								<option value="1">CategoriaId</option>
								<option value="2">Descripci&oacute;n</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Filtrar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="ReiniciarFiltro"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>CategoriaId</th>
							<th>Fecha de Creaci&oacute;n</th>
							<th>Descripci&oacute;n</th>
							<th>Ver</th>
							<th>Editar</th>
							<th>Eliminar</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var categoria in categorias)
						{
							<tr>
								<td>@categoria.CategoriaId</td>
								<td>@categoria.FechaCreacion.ToShortDateString()</td>
								<td>@categoria.Descripcion</td>
								<td><button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(categoria.CategoriaId)"><i class="bi bi-eye" /></button></td>
								<td><button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(categoria.CategoriaId)"><i class="bi bi-pencil-square" /></button></td>
								<td><button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(categoria.CategoriaId)"><i class="bi bi-trash3-fill" /></button></td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Categorias:</strong> @categorias.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Categorias> categorias = new List<Categorias>();
	public Categorias categoria = new Categorias();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		categorias = await categoriasService.GetCategorias();
		loading = false;

		if (categorias.Count == 0)
			StateHasChanged();
	}

	public async Task Filtrar()
	{
		// categorias = await categoriasService.GetCategorias();
		// switch (filtro)
		// {
		// 	case 1:
		// 		if (int.TryParse(valorFiltro, out int id))
		// 		{
		// 			categorias = categorias.Where(c => c.CategoriaId == int.Parse(valorFiltro)).ToList();
		// 			break;
		// 		}
		// 		else
		// 		{
		// 			mensaje = "El valor ingresado para CategoriaId no es válido.";
		// 			break;
		// 		}
		// 	case 2:
		// 		categorias = categorias.Where(c => c.Descripcion == valorFiltro).ToList();
		// 		if (!categorias.Any())
		// 		{
		// 			mensaje = "No se encontraron resultados.";
		// 			await Task.Delay(2000);
		// 			await ReiniciarFiltro();
		// 		}
		// 		break;
		// }
		// await LimpiarPantalla();
	}

	public async Task ReiniciarFiltro()
	{
		categorias = categorias = await categoriasService.GetCategorias();
	}

	public async Task LimpiarPantalla()
	{
		await Task.Delay(2000);
		mensaje = string.Empty;
	}

	void Volver()
	{
		navigation.NavigateTo("/");
	}

	void IrACrear()
	{
		navigation.NavigateTo("/CreateCategorias");
	}

	void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewCategorias/categoriaId={id}");
	}
	void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditCategorias/categoriaId={id}");
	}
	void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteCategorias/categoriaId={id}");
	}
}